#!/usr/bin/env python3
import subprocess
import csv
import io
import sys
import os
from pathlib import Path

API_KEY = os.getenv("ALCHEMY_API_KEY")
if API_KEY is None:
    print("Please set the ALCHEMY_API_KEY environment variable.")
    sys.exit(1)

NETWORKS = {
    "mainnet": {
        "display_name": "Celo Mainnet",
        "files": {
            "rollup.json": "https://storage.googleapis.com/cel2-rollup-files/celo/rollup.json",
            "config.json": "https://storage.googleapis.com/cel2-rollup-files/celo/config.json",
            "deployment-l1.json": "https://storage.googleapis.com/cel2-rollup-files/celo/deployment-l1.json",
            "contracts-l1.json": "https://storage.googleapis.com/cel2-rollup-files/celo/contracts-l1.json",
        },
        "l2_rpc": "https://forno.celo.org",
        "l1_rpc": f"https://eth-mainnet.g.alchemy.com/v2/{API_KEY}",
        "l1_explorer": "https://eth.blockscout.com",
        "l2_explorer": "https://celo.blockscout.com",
    },
    "celo-sepolia": {
        "display_name": "Celo Sepolia Testnet",
        "files": {
            "rollup.json": "https://storage.googleapis.com/cel2-rollup-files/celo-sepolia/rollup.json",
            "deployment-l1.json": "https://storage.googleapis.com/cel2-rollup-files/celo-sepolia/deployment-l1.json",
            "contracts-l1.json": "https://storage.googleapis.com/cel2-rollup-files/celo-sepolia/contracts-l1.json",
        },
        "l2_rpc": "https://forno.celo-sepolia.celo-testnet.org",
        "l1_rpc": f"https://eth-sepolia.g.alchemy.com/v2/{API_KEY}",
        "l1_explorer": "https://sepolia.etherscan.io",
        "l2_explorer": "https://celo-sepolia.blockscout.com",
    },
}

PAGE_HEADER_CORE_CONTRACTS = """
---
title: Core Contracts
id: core-contracts
---

[comment]: <> (DO NOT EDIT THIS FILE MANUALLY)
[comment]: <> (Autogenerated by `scripts/update_contracts.py`)

Core contract addresses for the Celo networks.
""".strip()

PAGE_HEADER_TOKEN_CONTRACTS = """
---
title: Token Contracts
id: token-contracts
---

[comment]: <> (DO NOT EDIT THIS FILE MANUALLY)
[comment]: <> (Autogenerated by `scripts/update_contracts.py`)

Token addresses for Celo assets on Mainnet and the Celo Sepolia Testnet.

<Tip>
You can also query the list of listed fee currencies with the Celo CLI:

```sh
celocli network:whitelist
```
</Tip>

---
""".strip()


def check_celocli_exists() -> bool:
    """Check if the celocli binary exists in PATH using only stdlib."""
    paths = os.environ.get("PATH", "").split(os.pathsep)
    exts = [""] + (
        os.environ.get("PATHEXT", "").split(os.pathsep) if os.name == "nt" else []
    )
    for path in paths:
        for ext in exts:
            full_path = os.path.join(path, "celocli" + ext)
            if os.path.isfile(full_path) and os.access(full_path, os.X_OK):
                return True
    return False


def fetch_celo_cli_csv(network: str, command: str) -> str:
    """Run celocli and return its CSV output."""
    try:
        result = subprocess.run(
            [
                "celocli",
                command,
                "--node",
                NETWORKS[network]["l2_rpc"],
                "--csv",
            ],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True,
            check=True,
        )
        return result.stdout.strip()
    except subprocess.CalledProcessError as e:
        sys.exit(f"Error: celocli failed:\n{e.stderr}")
    except FileNotFoundError:
        sys.exit("Error: celocli binary not found in PATH.")


def csv_to_markdown(csv_text: str, network: str) -> str:
    """Convert CSV text to Markdown table with proxy links."""
    reader = csv.DictReader(io.StringIO(csv_text))
    lines = ["| Contract | Proxy |", "| -------- | ------ |"]
    for row in reader:
        contract = row.get("Contract", "").strip()
        proxy = row.get("Proxy", "").strip()
        if proxy:
            link = f"[`{proxy}`]({NETWORKS[network]['l2_explorer']}/address/{proxy})"
            lines.append(f"| {contract} | {link} |")
    return "\n".join(lines)


def token_csv_to_markdown(csv_text: str, network: str) -> str:
    reader = csv.DictReader(io.StringIO(csv_text))
    lines = ["| Token | Symbol | Token Address |", "| ----- | ------ | ------------- |"]
    for row in reader:
        contract = row.get("Name", "").strip()
        symbol = row.get("Symbol", "").strip()
        address = row.get("Token Address", "").strip()
        if address:
            link = (
                f"[`{address}`]({NETWORKS[network]['l2_explorer']}/address/{address})"
            )
            lines.append(f"| {contract} | {symbol} | {link} |")
    return "\n".join(lines)


def main():
    if not check_celocli_exists():
        sys.exit(
            "Error: 'celocli' binary not found. Please install it first: npm install -g @celo/celocli"
        )

    print("Fetching core contract data from celocli...")
    with Path("tooling/contracts/core-contracts.mdx").open("w") as f:
        f.write(PAGE_HEADER_CORE_CONTRACTS)

        for network, data in NETWORKS.items():
            print(f"Fetching contract data from celocli for {network}...")

            csv_output = fetch_celo_cli_csv(network, "network:contracts")
            markdown = csv_to_markdown(csv_output, network)

            f.write(f"\n\n## {data['display_name']}\n\n")
            f.write(markdown)

    print("Fetching token contract data from celocli...")
    with Path("tooling/contracts/token-contracts.mdx").open("w") as f:
        f.write(PAGE_HEADER_TOKEN_CONTRACTS)

        for network, data in NETWORKS.items():
            print(f"Fetching fee currency contract data from celocli for {network}...")

            csv_output = fetch_celo_cli_csv(network, "network:whitelist")
            markdown = token_csv_to_markdown(csv_output, network)

            f.write(f"\n\n## {data['display_name']}\n\n")
            f.write(markdown)


if __name__ == "__main__":
    main()
